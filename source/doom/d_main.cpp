//-----------------------------------------------------------------------------
//
// Copyright (C) 1993-1996 by id Software, Inc.
//
// This source is available for distribution and/or modification
// only under the terms of the DOOM Source Code License as
// published by id Software. All rights reserved.
//
// The source is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// FITNESS FOR A PARTICULAR PURPOSE. See the DOOM Source Code License
// for more details.
//
// DESCRIPTION:
//	DOOM main program (Doom::Main) and game loop (Doom::Loop),
//	plus functions to determine game mode (shareware, registered),
//	parse command line parameters, configure game parameters (turbo),
//	and call the startup functions.
//
//-----------------------------------------------------------------------------
import std;
#define __STD_MODULE__

#include "doomdef.h"
#include "doomstat.h"
#include "dstrings.h"
#include "sounds.h"

#include "am_map.h"
#include "d_main.h"
#include "f_finale.h"
#include "f_wipe.h"
#include "g_game.h"
#include "hu_stuff.h"
#include "i_system.h"
#include "i_sound.h"
#include "i_video.h"
#include "m_argv.h"
#include "m_misc.h"
#include "m_menu.h"
#include "p_setup.h"
#include "r_main.h"
#include "r_local.h"
#include "s_sound.h"
#include "st_stuff.h"
#include "v_video.h"
#include "w_wad.h"
#include "wi_stuff.h"
#include "z_zone.h"


#define BGCOLOR 7
#define FGCOLOR 8


void G_BuildTiccmd(ticcmd_t* cmd);

extern bool inhelpscreens;
extern int32 showMessages;
extern int forwardmove[2];
extern int sidemove[2];
extern void* statcopy;

bool advancedemo;

bool nomonsters;	 // checkparm of -nomonsters
bool respawnparm; // checkparm of -respawn
bool fastparm;	 // checkparm of -fast

skill_t startskill;
int startepisode;
int startmap;
bool autostart;

FILE* debugfile;

char wadfile[1024];		// primary wad file
char mapdir[1024];		// directory of development maps

// EVENT HANDLING
//
// Events are asynchronous inputs generally generated by the game user.
// Events can be discarded if no responder claims them

// Called by the I/O functions when input is detected
void Doom::PostEvent(const event_t& ev)
{
    events[eventHead] = ev;
    eventHead = (++eventHead) & (MaxEvents - 1);
}

bool Doom::HasEventInQueue(const event_t& event)
{
    for (; eventTail != eventHead; eventTail = (++eventTail) & (MaxEvents - 1))
    {
        if (events[eventTail] == event)
            I_Error("Network game synchronization aborted.");
    }

    return false;
}

const char* fA() { return "asdffsdf"; }
std::string fB() { return string("cccc"); }
std::string_view fC() { static const char* s = "...."; return s; }
std::filesystem::path fD() { return std::filesystem::path("adfgfghghh"); }
nonstd::string fE() { return string("ccccxx"); }
nonstd::string_view fF() { static const char* s = "....xx"; return s; }
nonstd::filesystem::path fG() { return nonstd::filesystem::path("axxxxdfgfghghh"); }

void Doom::Main()
{
    IdentifyVersion();

    setvbuf(stdout, nullptr, _IONBF, 0);

    nomonsters = CommandLine::HasArg("-nomonsters");
    respawnparm = CommandLine::HasArg("-respawn");
    fastparm = CommandLine::HasArg("-fast");
    isDevMode = CommandLine::HasArg("-devparm");

    if (CommandLine::HasArg("-altdeath"))
        deathmatch = 2;
    else if (CommandLine::HasArg("-deathmatch"))
        deathmatch = 1;

    static char title[128];
    switch (gamemode)
    {
    case GameMode::Doom1Retail:
        sprintf_s(title,
            "                         "
            "The Ultimate DOOM Startup v%i.%i"
            "                           ",
            Version / 100, Version % 100);
        break;
    case GameMode::Doom1Shareware:
        sprintf_s(title,
            "                            "
            "DOOM Shareware Startup v%i.%i"
            "                           ",
            Version / 100, Version % 100);
        break;
    case GameMode::Doom1Registered:
        sprintf_s(title,
            "                            "
            "DOOM Registered Startup v%i.%i"
            "                           ",
            Version / 100, Version % 100);
        break;
    case GameMode::Doom2Commercial:
        sprintf_s(title,
            "                         "
            "DOOM 2: Hell on Earth v%i.%i"
            "                           ",
            Version / 100, Version % 100);
        break;
    default:
        sprintf_s(title,
            "                     "
            "Public DOOM - v%i.%i"
            "                           ",
            Version / 100, Version % 100);
        break;
    }

    printf("%s\n", title);

    if (isDevMode)
        printf(D_DEVSTR);

    // turbo option
    if (CommandLine::HasArg("-turbo"))
    {
        int scale = 200;
        CommandLine::TryGetValues("-turbo", scale);

        if (scale < 10)
            scale = 10;
        if (scale > 400)
            scale = 400;

        printf("turbo scale: %i%%\n", scale);
        forwardmove[0] = forwardmove[0] * scale / 100;
        forwardmove[1] = forwardmove[1] * scale / 100;
        sidemove[0] = sidemove[0] * scale / 100;
        sidemove[1] = sidemove[1] * scale / 100;
    }

    char file[256];

    auto doWarp = [](int32 ep, int32 map)
        {
            if (gamemode == GameMode::Doom2Commercial)
                startmap = ep;
            else
            {
                startepisode = ep;
                startmap = map;
            }
            autostart = true;
        };

    // add any files specified on the command line with -file wadfile to the wad list
    // convenience hack to allow -wart e m to add a wad file prepend a tilde to the filename so wadfile will be reloadable
    if (int32 ep = 0, map = 0; CommandLine::TryGetValues("-wart", ep, map))
    {
        // Map name handling.
        switch (gamemode)
        {
        case GameMode::Doom1Shareware:
        case GameMode::Doom1Retail:
        case GameMode::Doom1Registered:
            sprintf_s(file, "~" DEVMAPS "E%dM%d.wad", ep, map);
            printf("Warping to Episode %d, Map %d.\n", ep, map);
            break;

        case GameMode::Doom2Commercial:
        default:
            sprintf_s(file, "~" DEVMAPS "cdata/map%02d.wad", ep);
            break;
        }
        AddFile(file);

        doWarp(ep,map);
    }

    if (vector<string_view> fileList; CommandLine::GetValueList("-file", fileList))
    {
        isModified = true; // homebrew levels
        for (auto fileName : fileList)
            AddFile(fileName);
    }

    if (string_view name;
        CommandLine::TryGetValues("-playdemo", name) ||
        CommandLine::TryGetValues("-timedemo", name))
    {
        string fileName(name);
        fileName += ".lmp";
        AddFile(fileName);
        printf("Playing demo %s.\n", fileName.c_str());
    }

    // get skill / episode / map from parms
    startskill = sk_medium;
    startepisode = 1;
    startmap = 1;
    autostart = false;

    if (int32 skill = 0; CommandLine::TryGetValues("-skill", skill))
    {
        startskill = static_cast<skill_t>(skill);
        autostart = true;
    }

    if (CommandLine::TryGetValues("-episode", startepisode))
    {
        startmap = 1;
        autostart = true;
    }

    if (int32 time = 0; CommandLine::TryGetValues("-timer", time) && deathmatch)
    {
        printf("Levels will end after %d minute", time);
        if (time > 1)
            printf("s");
        printf(".\n");
    }

    if (CommandLine::HasArg("-avg") && deathmatch)
        printf("Austin Virtual Gaming: Levels will end after 20 minutes\n");

    if (int32 ep = 0, map = 0; CommandLine::TryGetValues("-warp", ep, map))
        doWarp(ep,map);

    // init subsystems
    printf("Z_Init: Init zone memory allocation daemon. \n");
    Z_Init();

    printf("Video::Init: allocate screens.\n");
    video = new Video(this);
    video->Init();

    printf("Settings::Load: Load system defaults.\n");
    Settings::Load(); // load before initing other systems

    printf("W_Init: Init WADfiles.\n");
    W_InitMultipleFiles(wadFiles);

    std::cout << "Init Game\n";
    game = new Game(this);

    // Check for -file in shareware
    if (isModified)
    {
        // These are the lumps that will be checked in IWAD,
        // if any one is not present, execution will be aborted.
        char name[23][9] =
        {
            "e2m1", "e2m2", "e2m3", "e2m4", "e2m5", "e2m6", "e2m7", "e2m8", "e2m9",
            "e3m1", "e3m3", "e3m3", "e3m4", "e3m5", "e3m6", "e3m7", "e3m8", "e3m9",
            "dphoof", "bfgga0", "heada1", "cybra1", "spida1d1" };
        int i;

        if (gamemode == GameMode::Doom1Shareware)
            I_Error("\nYou cannot -file with the shareware ", "version. Register!");

        // Check for fake IWAD with right name,
        // but w/o all the lumps of the registered version.
        if (gamemode == GameMode::Doom1Registered)
            for (i = 0; i < 23; i++)
                if (W_CheckNumForName(name[i]) < 0)
                    I_Error("\nThis is not the registered version.");
    }

    // If additional PWAD files are used, print modified banner
    if (isModified)
    {
        /*m*/ printf(
            "===========================================================================\n"
            "ATTENTION:  This version of DOOM has been modified.  If you would like to\n"
            "get a copy of the original game, call 1-800-IDGAMES or see the readme file.\n"
            "        You will not receive technical support for modified games.\n"
            "                      press enter to continue\n"
            "===========================================================================\n");
        getchar();
    }

    // Check and print which version is executed.
    switch (gamemode)
    {
    case GameMode::Doom1Shareware:
    case GameMode::Unknown:
        printf(
            "===========================================================================\n"
            "                                Shareware!\n"
            "===========================================================================\n");
        break;
    case GameMode::Doom1Registered:
    case GameMode::Doom1Retail:
    case GameMode::Doom2Commercial:
        printf(
            "===========================================================================\n"
            "                 Commercial product - do not distribute!\n"
            "         Please report software piracy to the SPA: 1-800-388-PIR8\n"
            "===========================================================================\n");
        break;

    default:
        // Ouch.
        break;
    }

    printf("Menu::Init: Init miscellaneous info.\n");
    Menu::Init();

    printf("Render::Init: Init DOOM refresh daemon - ");
    render = new Render;
    render->Init();

    printf("\nP_Init: Init Playloop state.\n");
    P_Init(this);

    printf("I_Init: Setting up machine state.\n");
    I_Init();

    printf("Net::CheckGame: Checking network game status.\n");
    Net::CheckGame();

    printf("S_Init: Setting up sound.\n");
    S_Init(snd_SfxVolume /* *8 */, snd_MusicVolume /* *8*/);

    printf("HU_Init: Setting up heads up display.\n");
    HU_Init();

    printf("ST_Init: Init status bar.\n");
    ST_Init();

    // check for a driver that wants intermission stats
    if (int64 val; CommandLine::TryGetValues("-playdemo", val))
    {
        // for statistics driver
        statcopy = reinterpret_cast<void*>(val);
        printf("External statistics registered.\n");
    }

    // start the appropriate game based on params
    if (string name; CommandLine::TryGetValues("-record", name))
    {
        G_RecordDemo(this, name.c_str());
        autostart = true;
    }

    if (string demo; CommandLine::TryGetValues("-playdemo", demo))
    {
        singledemo = true; // quit after one demo
        G_DeferedPlayDemo(demo.c_str());
        Loop(); // never returns
    }

    if (string demo; CommandLine::TryGetValues("-timedemo", demo))
    {
        noDrawers = CommandLine::HasArg("-nodraw");
        G_TimeDemo(demo.c_str());
        Loop(); // never returns
    }

    if (int32 load; CommandLine::TryGetValues("-loadgame", load))
        game->LoadGame(Game::GetSaveFilePath(load));

    if (gameaction != ga_loadgame)
    {
        if (autostart || netgame)
            G_InitNew(startskill, startepisode, startmap);
        else
            StartTitle(); // start up intro loop
    }

    Loop(); // never returns
}

// Not a globally visible function,
//  just included for source reference,
//  called by Doom::Main, never exits.
// Manages timing and IO,
//  calls all ?_Responder, ?_Ticker, and ?_Drawer,
//  calls I_GetTime, Video::StartFrame, and Video::StartTic
void Doom::Loop()
{
    if (isDemoRecording)
        G_BeginRecording();

    if (CommandLine::HasArg("-debugfile"))
    {
        string fileName = "debug" + convert<string>(consoleplayer) + ".txt";
        printf("debug output to: %s\n", fileName.c_str());
        fopen_s(&debugfile, fileName.c_str(), "w");
    }

    while (1)
    {
        // frame synchronous IO operations
        video->StartFrame();

        // process one or more tics
        if (useSingleTicks)
        {
            video->StartTick();
            ProcessEvents();
            G_BuildTiccmd(&netcmds[consoleplayer][maketic % BACKUPTICS]);
            if (advancedemo)
                DoAdvanceDemo();
            M_Ticker();
            game->Ticker();
            gametic++;
            maketic++;
        }
        else
        {
            TryRunTics(); // will run at least one tic
        }

        S_UpdateSounds(players[consoleplayer].mo); // move positional sounds

        // Update display, next frame, with current state.
        Display();

        // Sound mixing for the buffer is snychronous.
        Sound::Update();
    }
}

// Send all the events of the given timestamp down the responder chain
void Doom::ProcessEvents()
{
    // IF STORE DEMO, DO NOT ACCEPT INPUT
    if (gamemode == GameMode::Doom2Commercial && (W_CheckNumForName("map01") < 0))
        return;

    for (; eventTail != eventHead; eventTail = (++eventTail) & (MaxEvents - 1))
    {
        if (M_Responder(events[eventTail]))
            continue; // menu ate the event

        G_Responder(events[eventTail]);
    }
}

int pagetic;
const char* pagename;

// This cycles through the demo sequences.
// FIXME - version dependend demo numbers?
void Doom::DoAdvanceDemo()
{
    players[consoleplayer].playerstate = PST_LIVE; // not reborn
    advancedemo = false;
    usergame = false; // no save / end game here
    paused = false;
    gameaction = ga_nothing;

    if (gamemode == GameMode::Doom1Retail)
        borderDrawCount = (borderDrawCount + 1) % 7;
    else
        borderDrawCount = (borderDrawCount + 1) % 6;

    switch (borderDrawCount)
    {
    case 0:
        if (gamemode == GameMode::Doom2Commercial)
            pagetic = 35 * 11;
        else
            pagetic = 170;
        gameState = GameState::Demo;
        pagename = "TITLEPIC";
        if (gamemode == GameMode::Doom2Commercial)
            S_StartMusic(mus_dm2ttl);
        else
            S_StartMusic(mus_intro);
        break;
    case 1:
        G_DeferedPlayDemo("demo1");
        break;
    case 2:
        pagetic = 200;
        gameState = GameState::Demo;
        pagename = "CREDIT";
        break;
    case 3:
        G_DeferedPlayDemo("demo2");
        break;
    case 4:
        gameState = GameState::Demo;
        if (gamemode == GameMode::Doom2Commercial)
        {
            pagetic = 35 * 11;
            pagename = "TITLEPIC";
            S_StartMusic(mus_dm2ttl);
        }
        else
        {
            pagetic = 200;

            if (gamemode == GameMode::Doom1Retail)
                pagename = "CREDIT";
            else
                pagename = "HELP2";
        }
        break;
    case 5:
        G_DeferedPlayDemo("demo3");
        break;
        // THE DEFINITIVE DOOM Special Edition demo
    case 6:
        G_DeferedPlayDemo("demo4");
        break;
    }
}

void Doom::StartTitle()
{
    gameaction = ga_nothing;
    borderDrawCount = -1;
    D_AdvanceDemo();
}

// Checks availability of IWAD files by name,
// to determine whether registered/commercial features
// should be executed (notably loading PWAD's).
void Doom::IdentifyVersion()
{
    if (CommandLine::HasArg("-shdev"))
    {
        gamemode = GameMode::Doom1Shareware;
        isDevMode = true;

        AddFile(Settings::DevDataPath / "doom1.wad");
        AddFile(DEVMAPS "data_se/texture1.lmp");
        AddFile(DEVMAPS "data_se/pnames.lmp");
        return;
    }

    if (CommandLine::HasArg("-regdev"))
    {
        gamemode = GameMode::Doom1Registered;
        isDevMode = true;

        AddFile(Settings::DevDataPath /"doom.wad");
        AddFile(DEVMAPS "data_se/texture1.lmp");
        AddFile(DEVMAPS "data_se/texture2.lmp");
        AddFile(DEVMAPS "data_se/pnames.lmp");
        return;
    }

    if (CommandLine::HasArg("-comdev"))
    {
        gamemode = GameMode::Doom2Commercial;
        isDevMode = true;

        AddFile(Settings::DevDataPath /"doom2.wad");
        AddFile(DEVMAPS "cdata/texture1.lmp");
        AddFile(DEVMAPS "cdata/pnames.lmp");
        return;
    }

    std::filesystem::path doomWadDir = "data";

    // Commercial.
    std::filesystem::path doom2Wad = doomWadDir / "doom2.wad";
    if (std::filesystem::exists(doom2Wad))
    {
        gamemode = GameMode::Doom2Commercial;
        AddFile(doom2Wad.string().c_str());
        return;
    }

    // Retail.
    std::filesystem::path doomUWad = doomWadDir / "doomu.wad";
    if (std::filesystem::exists(doomUWad))
    {
        gamemode = GameMode::Doom1Retail;
        AddFile(doomUWad.string().c_str());
        return;
    }

    // Registered.
    std::filesystem::path doomWad = doomWadDir / "doom.wad";
    if (std::filesystem::exists(doomWad))
    {
        gamemode = GameMode::Doom1Registered;
        AddFile(doomWad.string().c_str());
        return;
    }

    // Shareware.
    std::filesystem::path doom1Wad = doomWadDir / "doom1.wad";
    if (std::filesystem::exists(doom1Wad))
    {
        gamemode = GameMode::Doom1Shareware;
        AddFile(doom1Wad.string().c_str());
        return;
    }

    printf("Game mode indeterminate.\n");
    gamemode = GameMode::Unknown;
}

//  draw current display, possibly wiping it from the previous
// wipegamestate can be set to -1 to force a wipe on the next draw
GameState wipegamestate = GameState::Demo;

void Doom::Display()
{
    if (noDrawers)
        return; // for comparative timing / profiling

    // change the view size if needed
    if (render->CheckSetViewSize())
    {
        oldGameState = GameState::ForceWipe; // force background redraw
        borderDrawCount = 3;
    }

    // save the current screen if about to wipe
    bool wipe = false;
    if (gameState != wipegamestate)
    {
        wipe = true;
        wipe_StartScreen(0, 0, SCREENWIDTH, SCREENHEIGHT);
    }

    if (gameState == GameState::Level && gametic)
        HU_Erase();

    bool redrawStatusBar = false;

    // do buffered drawing
    switch (gameState)
    {
    case GameState::Level:
        if (!gametic)
            break;
        if (automapactive)
            AM_Drawer();
        if (wipe || (viewheight != 200 && fullScreen))
            redrawStatusBar = true;
        if (inHelpScreensState && !inhelpscreens)
            redrawStatusBar = true; // just put away the help screen
        ST_Drawer(viewheight == 200, redrawStatusBar);
        fullScreen = viewheight == 200;
        break;

    case GameState::Intermission:
        WI_Drawer();
        break;

    case GameState::Finale:
        F_Drawer();
        break;

    case GameState::Demo:
        PageDraw();
        break;
    }

    // draw buffered stuff to screen
    video->UpdateNoBlit();

    // draw the view directly
    if (gameState == GameState::Level && !automapactive && gametic)
        R_RenderPlayerView(&players[displayplayer]);

    if (gameState == GameState::Level && gametic)
        HU_Drawer();

    // clean up border stuff
    if (gameState != oldGameState && gameState != GameState::Level)
        video->SetPalette(W_CacheLumpName<byte>("PLAYPAL", PU_CACHE));

    // see if the border needs to be initially drawn
    if (gameState == GameState::Level && oldGameState != GameState::Level)
    {
        viewActiveState = false; // view was not active
        R_FillBackScreen();		 // draw the pattern into the back screen
    }

    // see if the border needs to be updated to the screen
    if (gameState == GameState::Level && !automapactive && scaledviewwidth != 320)
    {
        if (menuactive || menuActiveState || !viewActiveState)
            borderDrawCount = 3;
        if (borderDrawCount)
        {
            R_DrawViewBorder(); // erase old menu stuff
            borderDrawCount--;
        }
    }

    menuActiveState = menuactive;
    viewActiveState = viewactive;
    inHelpScreensState = inhelpscreens;
    oldGameState = wipegamestate = gameState;

    // draw pause pic
    if (paused)
    {
        int32 y = 0;
        if (automapactive)
            y = 4;
        else
            y = viewwindowy + 4;
        video->DrawPatch(viewwindowx + (scaledviewwidth - 68) / 2, y, 0, W_CacheLumpName<patch_t>("M_PAUSE", PU_CACHE));
    }

    // menus go directly to the screen
    M_Drawer();	 // menu is drawn even on top of everything
    NetUpdate(); // send out any new accumulation

    // normal update
    if (!wipe)
    {
        video->FinishUpdate(); // page flip or blit buffer
        return;
    }

    // wipe update
    wipe_EndScreen(0, 0, SCREENWIDTH, SCREENHEIGHT);

    auto wipestart = I_GetTime() - 1;

    bool done = false;
    do
    {
        time_t tics = 0;
        time_t now = 0;
        do
        {
            now = I_GetTime();
            tics = now - wipestart;
        }
        while (!tics);

        assert(tics > 0);
        wipestart = now;
        done = wipe_ScreenWipe(wipe_Melt, 0, 0, SCREENWIDTH, SCREENHEIGHT, tics);
        video->UpdateNoBlit();
        M_Drawer();		  // menu is drawn even on top of wipes
        video->FinishUpdate(); // page flip or blit buffer
    }
    while (!done);
}

void Doom::PageDraw()
{
    video->DrawPatch(0, 0, 0, W_CacheLumpName<patch_t>(pagename, PU_CACHE));
}

//  DEMO LOOP

// Handles timing for warped projection
void D_PageTicker()
{
    if (--pagetic < 0)
        D_AdvanceDemo();
}

// Called after each demo or intro demosequence finishes
void D_AdvanceDemo()
{
    advancedemo = true;
}
