//-----------------------------------------------------------------------------
//
// Copyright (C) 1993-1996 by id Software, Inc.
//
// This source is available for distribution and/or modification
// only under the terms of the DOOM Source Code License as
// published by id Software. All rights reserved.
//
// The source is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// FITNESS FOR A PARTICULAR PURPOSE. See the DOOM Source Code License
// for more details.
//
// DESCRIPTION:
//	DOOM main program (D_DoomMain) and game loop (D_DoomLoop),
//	plus functions to determine game mode (shareware, registered),
//	parse command line parameters, configure game parameters (turbo),
//	and call the startup functions.
//
//-----------------------------------------------------------------------------

#define BGCOLOR 7
#define FGCOLOR 8

#include "doomdef.h"
#include "doomstat.h"
#include "dstrings.h"
#include "sounds.h"

#include "am_map.h"
#include "d_main.h"
#include "f_finale.h"
#include "f_wipe.h"
#include "g_game.h"
#include "hu_stuff.h"
#include "i_system.h"
#include "i_sound.h"
#include "i_video.h"
#include "m_argv.h"
#include "m_misc.h"
#include "m_menu.h"
#include "p_setup.h"
#include "r_main.h"
#include "r_local.h"
#include "s_sound.h"
#include "st_stuff.h"
#include "v_video.h"
#include "w_wad.h"
#include "wi_stuff.h"
#include "z_zone.h"

#include <malloc.h>
#include <string.h>
#include <stdlib.h>
#include <direct.h>
#include <io.h>
#include <errno.h>
#include <crtdbg.h>

void D_DoAdvanceDemo();
void D_CheckNetGame();
void G_BuildTiccmd(ticcmd_t* cmd);

extern boolean inhelpscreens;
extern boolean setsizeneeded;
extern intptr_t showMessages;
extern int forwardmove[2];
extern int sidemove[2];
extern void* statcopy;

boolean advancedemo;

//
// D-DoomLoop()
// Not a globally visible function,
//  just included for source reference,
//  called by D_DoomMain, never exits.
// Manages timing and IO,
//  calls all ?_Responder, ?_Ticker, and ?_Drawer,
//  calls I_GetTime, I_StartFrame, and I_StartTic
//
void D_DoomLoop();

char* wadfiles[MAXWADFILES];

boolean devparm;	 // started game with -devparm
boolean nomonsters;	 // checkparm of -nomonsters
boolean respawnparm; // checkparm of -respawn
boolean fastparm;	 // checkparm of -fast

boolean drone;

boolean singletics = false; // debug flag to cancel adaptiveness

// extern int soundVolume;
// extern  int	sfxVolume;
// extern  int	musicVolume;

skill_t startskill;
int startepisode;
int startmap;
boolean autostart;

FILE* debugfile;

char wadfile[1024];		// primary wad file
char mapdir[1024];		// directory of development maps
char basedefault[1024]; // default file

//
// EVENT HANDLING
//
// Events are asynchronous inputs generally generated by the game user.
// Events can be discarded if no responder claims them
//
event_t events[MAXEVENTS];
int eventhead;
int eventtail;

//
// D_PostEvent
// Called by the I/O functions when input is detected
//
void D_PostEvent(event_t* ev)
{
    events[eventhead] = *ev;
    eventhead = (++eventhead) & (MAXEVENTS - 1);
}

//
// D_ProcessEvents
// Send all the events of the given timestamp down the responder chain
//
void D_ProcessEvents()
{
    // IF STORE DEMO, DO NOT ACCEPT INPUT
    if (gamemode == commercial && (W_CheckNumForName("map01") < 0))
        return;

    for (; eventtail != eventhead; eventtail = (++eventtail) & (MAXEVENTS - 1))
    {
        event_t* ev = &events[eventtail];
        if (M_Responder(ev))
            continue; // menu ate the event

        G_Responder(ev);
    }
}

//
// D_Display
//  draw current display, possibly wiping it from the previous
//

// wipegamestate can be set to -1 to force a wipe on the next draw
gamestate_t wipegamestate = GS_DEMOSCREEN;

void D_Display()
{
    static boolean viewactivestate = false;
    static boolean menuactivestate = false;
    static boolean inhelpscreensstate = false;
    static boolean fullscreen = false;
    static gamestate_t oldgamestate = GS_FORCE_WIPE;
    static int borderdrawcount;
    int nowtime;
    int tics;
    int wipestart;
    int y;
    boolean done;
    boolean wipe;
    boolean redrawsbar;

    if (nodrawers)
        return; // for comparative timing / profiling

    redrawsbar = false;

    // change the view size if needed
    if (setsizeneeded)
    {
        R_ExecuteSetViewSize();
        oldgamestate = GS_FORCE_WIPE; // force background redraw
        borderdrawcount = 3;
    }

    // save the current screen if about to wipe
    if (gamestate != wipegamestate)
    {
        wipe = true;
        wipe_StartScreen(0, 0, SCREENWIDTH, SCREENHEIGHT);
    }
    else
        wipe = false;

    if (gamestate == GS_LEVEL && gametic)
        HU_Erase();

    // do buffered drawing
    switch (gamestate)
    {
    case GS_LEVEL:
        if (!gametic)
            break;
        if (automapactive)
            AM_Drawer();
        if (wipe || (viewheight != 200 && fullscreen))
            redrawsbar = true;
        if (inhelpscreensstate && !inhelpscreens)
            redrawsbar = true; // just put away the help screen
        ST_Drawer(viewheight == 200, redrawsbar);
        fullscreen = viewheight == 200;
        break;

    case GS_INTERMISSION:
        WI_Drawer();
        break;

    case GS_FINALE:
        F_Drawer();
        break;

    case GS_DEMOSCREEN:
        D_PageDrawer();
        break;
    }

    // draw buffered stuff to screen
    I_UpdateNoBlit();

    // draw the view directly
    if (gamestate == GS_LEVEL && !automapactive && gametic)
        R_RenderPlayerView(&players[displayplayer]);

    if (gamestate == GS_LEVEL && gametic)
        HU_Drawer();

    // clean up border stuff
    if (gamestate != oldgamestate && gamestate != GS_LEVEL)
        I_SetPalette(W_CacheLumpName<byte>("PLAYPAL", PU_CACHE));

    // see if the border needs to be initially drawn
    if (gamestate == GS_LEVEL && oldgamestate != GS_LEVEL)
    {
        viewactivestate = false; // view was not active
        R_FillBackScreen();		 // draw the pattern into the back screen
    }

    // see if the border needs to be updated to the screen
    if (gamestate == GS_LEVEL && !automapactive && scaledviewwidth != 320)
    {
        if (menuactive || menuactivestate || !viewactivestate)
            borderdrawcount = 3;
        if (borderdrawcount)
        {
            R_DrawViewBorder(); // erase old menu stuff
            borderdrawcount--;
        }
    }

    menuactivestate = menuactive;
    viewactivestate = viewactive;
    inhelpscreensstate = inhelpscreens;
    oldgamestate = wipegamestate = gamestate;

    // draw pause pic
    if (paused)
    {
        if (automapactive)
            y = 4;
        else
            y = viewwindowy + 4;
        V_DrawPatchDirect(viewwindowx + (scaledviewwidth - 68) / 2, y, 0, W_CacheLumpName<patch_t>("M_PAUSE", PU_CACHE));
    }

    // menus go directly to the screen
    M_Drawer();	 // menu is drawn even on top of everything
    NetUpdate(); // send out any new accumulation

    // normal update
    if (!wipe)
    {
        I_FinishUpdate(); // page flip or blit buffer
        return;
    }

    // wipe update
    wipe_EndScreen(0, 0, SCREENWIDTH, SCREENHEIGHT);

    wipestart = I_GetTime() - 1;

    do
    {
        do
        {
            nowtime = I_GetTime();
            tics = nowtime - wipestart;
        } while (!tics);
        wipestart = nowtime;
        done = wipe_ScreenWipe(wipe_Melt, 0, 0, SCREENWIDTH, SCREENHEIGHT, tics);
        I_UpdateNoBlit();
        M_Drawer();		  // menu is drawn even on top of wipes
        I_FinishUpdate(); // page flip or blit buffer
    } while (!done);
}

//
//  D_DoomLoop
//
extern boolean demorecording;

void D_DoomLoop()
{
    if (demorecording)
        G_BeginRecording();

    if (CommandLine::HasArg("-debugfile"))
    {
        char filename[20];
        sprintf_s(filename, 20, "debug%i.txt", consoleplayer);
        printf("debug output to: %s\n", filename);
        fopen_s(&debugfile, filename, "w");
    }

    I_InitGraphics();

    while (1)
    {
        // frame syncronous IO operations
        I_StartFrame();

        // process one or more tics
        if (singletics)
        {
            I_StartTic();
            D_ProcessEvents();
            G_BuildTiccmd(&netcmds[consoleplayer][maketic % BACKUPTICS]);
            if (advancedemo)
                D_DoAdvanceDemo();
            M_Ticker();
            G_Ticker();
            gametic++;
            maketic++;
        }
        else
        {
            TryRunTics(); // will run at least one tic
        }

        S_UpdateSounds(players[consoleplayer].mo); // move positional sounds

        // Update display, next frame, with current state.
        D_Display();

#ifndef SNDSERV
        // Sound mixing for the buffer is snychronous.
        I_UpdateSound();
#endif
        // Synchronous sound output is explicitly called.
#ifndef SNDINTR
        // Update sound output.
        I_SubmitSound();
#endif
    }
}

//
//  DEMO LOOP
//
int demosequence;
int pagetic;
const char* pagename;

//
// D_PageTicker
// Handles timing for warped projection
//
void D_PageTicker()
{
    if (--pagetic < 0)
        D_AdvanceDemo();
}

//
// D_PageDrawer
//
void D_PageDrawer()
{
    V_DrawPatch(0, 0, 0, W_CacheLumpName<patch_t>(pagename, PU_CACHE));
}

//
// D_AdvanceDemo
// Called after each demo or intro demosequence finishes
//
void D_AdvanceDemo()
{
    advancedemo = true;
}

//
// This cycles through the demo sequences.
// FIXME - version dependend demo numbers?
//
void D_DoAdvanceDemo()
{
    players[consoleplayer].playerstate = PST_LIVE; // not reborn
    advancedemo = false;
    usergame = false; // no save / end game here
    paused = false;
    gameaction = ga_nothing;

    if (gamemode == retail)
        demosequence = (demosequence + 1) % 7;
    else
        demosequence = (demosequence + 1) % 6;

    switch (demosequence)
    {
    case 0:
        if (gamemode == commercial)
            pagetic = 35 * 11;
        else
            pagetic = 170;
        gamestate = GS_DEMOSCREEN;
        pagename = "TITLEPIC";
        if (gamemode == commercial)
            S_StartMusic(mus_dm2ttl);
        else
            S_StartMusic(mus_intro);
        break;
    case 1:
        G_DeferedPlayDemo("demo1");
        break;
    case 2:
        pagetic = 200;
        gamestate = GS_DEMOSCREEN;
        pagename = "CREDIT";
        break;
    case 3:
        G_DeferedPlayDemo("demo2");
        break;
    case 4:
        gamestate = GS_DEMOSCREEN;
        if (gamemode == commercial)
        {
            pagetic = 35 * 11;
            pagename = "TITLEPIC";
            S_StartMusic(mus_dm2ttl);
        }
        else
        {
            pagetic = 200;

            if (gamemode == retail)
                pagename = "CREDIT";
            else
                pagename = "HELP2";
        }
        break;
    case 5:
        G_DeferedPlayDemo("demo3");
        break;
        // THE DEFINITIVE DOOM Special Edition demo
    case 6:
        G_DeferedPlayDemo("demo4");
        break;
    }
}

//
// D_StartTitle
//
void D_StartTitle()
{
    gameaction = ga_nothing;
    demosequence = -1;
    D_AdvanceDemo();
}

//
// D_AddFile
//
void D_AddFile(const char* file)
{
    int numwadfiles = 0;
    for (; wadfiles[numwadfiles]; ++numwadfiles)
        ;

    auto length = strlen(file) + 1;
    char* newfile = static_cast<char*>(malloc(length));
    strcpy_s(newfile, length, file);

    wadfiles[numwadfiles] = newfile;
}

//
// IdentifyVersion
// Checks availability of IWAD files by name,
// to determine whether registered/commercial features
// should be executed (notably loading PWAD's).
//
void IdentifyVersion()
{
    const char* doomwaddir = "E:\\personal\\doom\\data";

    // Commercial.
    auto size = strlen(doomwaddir) + 1 + 9 + 1;
    char* doom2wad = static_cast<char*>(malloc(size));
    sprintf_s(doom2wad, size, "%s\\doom2.wad", doomwaddir);

    // Retail.
    size = strlen(doomwaddir) + 1 + 9 + 1;
    char* doomuwad = static_cast<char*>(malloc(size));
    sprintf_s(doomuwad, size, "%s/doomu.wad", doomwaddir);

    // Registered.
    size = strlen(doomwaddir) + 1 + 8 + 1;
    char* doomwad = static_cast<char*>(malloc(size));
    sprintf_s(doomwad, size, "%s/doom.wad", doomwaddir);

    // Shareware.
    size = strlen(doomwaddir) + 1 + 9 + 1;
    char* doom1wad = static_cast<char*>(malloc(size));
    sprintf_s(doom1wad, size, "%s/doom1.wad", doomwaddir);

    size = strlen(doomwaddir) + 1 + 9 + 1;
    char* tntwad = static_cast<char*>(malloc(size));
    sprintf_s(tntwad, size, "%s/tnt.wad", doomwaddir);

    if (CommandLine::HasArg("-shdev"))
    {
        gamemode = shareware;
        devparm = true;
        D_AddFile(DEVDATA "doom1.wad");
        D_AddFile(DEVMAPS "data_se/texture1.lmp");
        D_AddFile(DEVMAPS "data_se/pnames.lmp");
        strcpy_s(basedefault, DEVDATA "default.cfg");
        return;
    }

    if (CommandLine::HasArg("-regdev"))
    {
        gamemode = registered;
        devparm = true;
        D_AddFile(DEVDATA "doom.wad");
        D_AddFile(DEVMAPS "data_se/texture1.lmp");
        D_AddFile(DEVMAPS "data_se/texture2.lmp");
        D_AddFile(DEVMAPS "data_se/pnames.lmp");
        strcpy_s(basedefault, DEVDATA "default.cfg");
        return;
    }

    if (CommandLine::HasArg("-comdev"))
    {
        gamemode = commercial;
        devparm = true;
        /* I don't bother
        if(plutonia)
            D_AddFile (DEVDATA"plutonia.wad");
        else if(tnt)
            D_AddFile (DEVDATA"tnt.wad");
        else*/
        D_AddFile(DEVDATA "doom2.wad");

        D_AddFile(DEVMAPS "cdata/texture1.lmp");
        D_AddFile(DEVMAPS "cdata/pnames.lmp");
        strcpy_s(basedefault, DEVDATA "default.cfg");
        return;
    }

    if (!_access(doom2wad, R_OK))
    {
        gamemode = commercial;
        D_AddFile(doom2wad);
        return;
    }

    if (!_access(tntwad, R_OK))
    {
        gamemode = commercial;
        D_AddFile(tntwad);
        return;
    }

    if (!_access(doomuwad, R_OK))
    {
        gamemode = retail;
        D_AddFile(doomuwad);
        return;
    }

    if (!_access(doomwad, R_OK))
    {
        gamemode = registered;
        D_AddFile(doomwad);
        return;
    }

    if (!_access(doom1wad, R_OK))
    {
        gamemode = shareware;
        D_AddFile(doom1wad);
        return;
    }

    printf("Game mode indeterminate.\n");
    gamemode = indetermined;

    // We don't abort. Let's see what the PWAD contains.
    // exit(1);
    // I_Error ("Game mode indeterminate\n");
}

//
// D_DoomMain
//
void D_DoomMain()
{
    static char title[128];

    _CrtSetDebugFillThreshold(0);

    IdentifyVersion();

    setvbuf(stdout, nullptr, _IONBF, 0);
    modifiedgame = false;

    nomonsters = CommandLine::HasArg("-nomonsters");
    respawnparm = CommandLine::HasArg("-respawn");
    fastparm = CommandLine::HasArg("-fast");
    devparm = CommandLine::HasArg("-devparm");

    if (CommandLine::HasArg("-altdeath"))
        deathmatch = 2;
    else if (CommandLine::HasArg("-deathmatch"))
        deathmatch = 1;

    switch (gamemode)
    {
    case retail:
        sprintf_s(title,
            "                         "
            "The Ultimate DOOM Startup v%i.%i"
            "                           ",
            VERSION / 100, VERSION % 100);
        break;
    case shareware:
        sprintf_s(title,
            "                            "
            "DOOM Shareware Startup v%i.%i"
            "                           ",
            VERSION / 100, VERSION % 100);
        break;
    case registered:
        sprintf_s(title,
            "                            "
            "DOOM Registered Startup v%i.%i"
            "                           ",
            VERSION / 100, VERSION % 100);
        break;
    case commercial:
        sprintf_s(title,
            "                         "
            "DOOM 2: Hell on Earth v%i.%i"
            "                           ",
            VERSION / 100, VERSION % 100);
        break;
        /*FIXME
               case pack_plut:
            sprintf (title,
                 "                   "
                 "DOOM 2: Plutonia Experiment v%i.%i"
                 "                           ",
                 VERSION/100,VERSION%100);
            break;
              case pack_tnt:
            sprintf (title,
                 "                     "
                 "DOOM 2: TNT - Evilution v%i.%i"
                 "                           ",
                 VERSION/100,VERSION%100);
            break;
        */
    default:
        sprintf_s(title,
            "                     "
            "Public DOOM - v%i.%i"
            "                           ",
            VERSION / 100, VERSION % 100);
        break;
    }

    printf("%s\n", title);

    if (devparm)
        printf(D_DEVSTR);

    if (CommandLine::HasArg("-cdrom"))
    {
        printf(D_CDROM);
        _mkdir("c:\\doomdata");
        strcpy_s(basedefault, "c:/doomdata/default.cfg");
    }

    // turbo option
    if (CommandLine::HasArg("-turbo"))
    {
        int scale = 200;
        CommandLine::TryGetValues("-turbo", scale);

        if (scale < 10)
            scale = 10;
        if (scale > 400)
            scale = 400;

        printf("turbo scale: %i%%\n", scale);
        forwardmove[0] = forwardmove[0] * scale / 100;
        forwardmove[1] = forwardmove[1] * scale / 100;
        sidemove[0] = sidemove[0] * scale / 100;
        sidemove[1] = sidemove[1] * scale / 100;
    }

    char file[256];

    auto doWarp = [](int32 ep, int32 map)
    {
        if (gamemode == commercial)
            startmap = ep;
        else
        {
            startepisode = ep;
            startmap = map;
        }
        autostart = true;
};

    // add any files specified on the command line with -file wadfile
    // to the wad list
    //
    // convenience hack to allow -wart e m to add a wad file
    // prepend a tilde to the filename so wadfile will be reloadable
    if (int32 ep = 0, map = 0; CommandLine::TryGetValues("-wart", ep, map))
    {
        // Map name handling.
        switch (gamemode)
        {
        case shareware:
        case retail:
        case registered:
            sprintf_s(file, "~" DEVMAPS "E%dM%d.wad", ep, map);
            printf("Warping to Episode %d, Map %d.\n", ep, map);
            break;

        case commercial:
        default:
            sprintf_s(file, "~" DEVMAPS "cdata/map%02d.wad", ep);
            break;
        }
        D_AddFile(file);

        doWarp(ep,map);
    }

    if (vector<string_view> fileList; CommandLine::GetValueList("-file", fileList))
    {
        modifiedgame = true; // homebrew levels
        for (auto file : fileList)
            D_AddFile(string(file).c_str());
    }

    if (string_view name;
        CommandLine::TryGetValues("-playdemo", name) ||
        CommandLine::TryGetValues("-timedemo", name))
    {
        string file(name);
        file += ".lmp";
        D_AddFile(file.c_str());
        printf("Playing demo %s.\n", file.c_str());
    }

    // get skill / episode / map from parms
    startskill = sk_medium;
    startepisode = 1;
    startmap = 1;
    autostart = false;

    if (int32 skill = 0; CommandLine::TryGetValues("-skill", skill))
    {
        startskill = static_cast<skill_t>(skill);
        autostart = true;
    }

    if (CommandLine::TryGetValues("-episode", startepisode))
    {
        startmap = 1;
        autostart = true;
    }

    if (int32 time = 0; CommandLine::TryGetValues("-timer", time) && deathmatch)
    {
        printf("Levels will end after %d minute", time);
        if (time > 1)
            printf("s");
        printf(".\n");
    }

    if (CommandLine::HasArg("-avg") && deathmatch)
        printf("Austin Virtual Gaming: Levels will end after 20 minutes\n");

    if (int32 ep = 0, map = 0; CommandLine::TryGetValues("-warp", ep, map))
        doWarp(ep,map);

    // init subsystems
    printf("V_Init: allocate screens.\n");
    V_Init();

    printf("M_LoadDefaults: Load system defaults.\n");
    M_LoadDefaults(); // load before initing other systems

    printf("Z_Init: Init zone memory allocation daemon. \n");
    Z_Init();

    printf("W_Init: Init WADfiles.\n");
    W_InitMultipleFiles(wadfiles);

    // Check for -file in shareware
    if (modifiedgame)
    {
        // These are the lumps that will be checked in IWAD,
        // if any one is not present, execution will be aborted.
        char name[23][9] =
        {
            "e2m1", "e2m2", "e2m3", "e2m4", "e2m5", "e2m6", "e2m7", "e2m8", "e2m9",
            "e3m1", "e3m3", "e3m3", "e3m4", "e3m5", "e3m6", "e3m7", "e3m8", "e3m9",
            "dphoof", "bfgga0", "heada1", "cybra1", "spida1d1" };
        int i;

        if (gamemode == shareware)
            I_Error("\nYou cannot -file with the shareware ", "version. Register!");

        // Check for fake IWAD with right name,
        // but w/o all the lumps of the registered version.
        if (gamemode == registered)
            for (i = 0; i < 23; i++)
                if (W_CheckNumForName(name[i]) < 0)
                    I_Error("\nThis is not the registered version.");
    }

    // Iff additonal PWAD files are used, print modified banner
    if (modifiedgame)
    {
        /*m*/ printf(
            "===========================================================================\n"
            "ATTENTION:  This version of DOOM has been modified.  If you would like to\n"
            "get a copy of the original game, call 1-800-IDGAMES or see the readme file.\n"
            "        You will not receive technical support for modified games.\n"
            "                      press enter to continue\n"
            "===========================================================================\n");
        getchar();
    }

    // Check and print which version is executed.
    switch (gamemode)
    {
    case shareware:
    case indetermined:
        printf(
            "===========================================================================\n"
            "                                Shareware!\n"
            "===========================================================================\n");
        break;
    case registered:
    case retail:
    case commercial:
        printf(
            "===========================================================================\n"
            "                 Commercial product - do not distribute!\n"
            "         Please report software piracy to the SPA: 1-800-388-PIR8\n"
            "===========================================================================\n");
        break;

    default:
        // Ouch.
        break;
    }

    printf("M_Init: Init miscellaneous info.\n");
    M_Init();

    printf("R_Init: Init DOOM refresh daemon - ");
    R_Init();

    printf("\nP_Init: Init Playloop state.\n");
    P_Init();

    printf("I_Init: Setting up machine state.\n");
    I_Init();

    printf("D_CheckNetGame: Checking network game status.\n");
    D_CheckNetGame();

    printf("S_Init: Setting up sound.\n");
    S_Init(snd_SfxVolume /* *8 */, snd_MusicVolume /* *8*/);

    printf("HU_Init: Setting up heads up display.\n");
    HU_Init();

    printf("ST_Init: Init status bar.\n");
    ST_Init();

    // check for a driver that wants intermission stats
    if (int64 val; CommandLine::TryGetValues("-playdemo", val))
    {
        // for statistics driver
        statcopy = reinterpret_cast<void*>(val);
        printf("External statistics registered.\n");
    }

    // start the appropriate game based on params
    if (string name; CommandLine::TryGetValues("-record", name))
    {
        G_RecordDemo(name.c_str());
        autostart = true;
    }

    if (string demo; CommandLine::TryGetValues("-playdemo", demo))
    {
        singledemo = true; // quit after one demo
        G_DeferedPlayDemo(demo.c_str());
        D_DoomLoop(); // never returns
    }

    if (string demo; CommandLine::TryGetValues("-timedemo", demo))
    {
        G_TimeDemo(demo.c_str());
        D_DoomLoop(); // never returns
    }

    if (int load; CommandLine::TryGetValues("-loadgame", load))
    {
        if (CommandLine::HasArg("-cdrom"))
            sprintf_s(file, "c:\\doomdata\\" SAVEGAMENAME "%d.dsg", load);
        else
            sprintf_s(file, SAVEGAMENAME "%d.dsg", load);
        G_LoadGame(file);
    }

    if (gameaction != ga_loadgame)
    {
        if (autostart || netgame)
            G_InitNew(startskill, startepisode, startmap);
        else
            D_StartTitle(); // start up intro loop
    }

    D_DoomLoop(); // never returns
}
